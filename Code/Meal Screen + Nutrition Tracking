//THIS IS THE CODE FOR MEAL PLAN SCREEN

int goal = 1000;

	public Meal getRandomMeal(MealsInfo[] restaurants, String filter) {
		// Filter the restaurants based on the selected filter
		List<MealsInfo> filteredRestaurants = Arrays.stream(restaurants)
				.filter(restaurant -> filter.equals("All") ||
						restaurant.speciality.equals(filter))
				.collect(Collectors.toList());

		if (filteredRestaurants.isEmpty()) {
			return null;
		}

		// Select a random restaurant from the filtered list
		MealsInfo restaurant = filteredRestaurants.get((int) (Math.random() *
				filteredRestaurants.size()));

		// Select a random meal from the restaurant
		Meal[] meals = { restaurant.breakfast, restaurant.lunch, restaurant.dinner };
		Meal meal = meals[(int) (Math.random() * meals.length)];

		return meal;
	}

	private void updateMealLabels(MealsInfo[] restaurants, String filter, Label breakfast, Label lunch, Label dinner) {
		int totalCalories = 0;
		Meal[] selectedMeals = new Meal[3];

		// Select random meals until their total calories exceed `goal`
		while (totalCalories <= goal) {
			// Select a random meal for breakfast, lunch, and dinner
			Meal breakfastMeal = getRandomMeal(restaurants, filter);
			Meal lunchMeal = getRandomMeal(restaurants, filter);
			Meal dinnerMeal = getRandomMeal(restaurants, filter);

			// If any of the meals are null, it means there aren't enough meals for the
			// selected filter
			if (breakfastMeal == null || lunchMeal == null || dinnerMeal == null) {
				break;
			}

			// Calculate the total calories of the three meals
			totalCalories = breakfastMeal.getCalories() + lunchMeal.getCalories() +
					dinnerMeal.getCalories();

			// Save the selected meals
			selectedMeals[0] = breakfastMeal;
			selectedMeals[1] = lunchMeal;
			selectedMeals[2] = dinnerMeal;
		}

		// Update the meal labels
		if (totalCalories > goal) {
			breakfast.setText("Breakfast:\n" + selectedMeals[0].getDescription() + "\n" +
					selectedMeals[0].getCalories()
					+ " calories" + "\n" + "From Restaurant: " + "\n" +
					selectedMeals[0].getName());
			lunch.setText(
					"Lunch:\n" + selectedMeals[1].getDescription() + "\n" +
							selectedMeals[1].getCalories()
							+ " calories" + "\n" + "From Restaurant: " + "\n" +
							selectedMeals[1].getName());
			dinner.setText(
					"Dinner:\n" + selectedMeals[2].getDescription() + "\n" +
							selectedMeals[2].getCalories()
							+ " calories" + "\n" + "From Restaurant: " + "\n" +
							selectedMeals[2].getName());
		} else {
			breakfast.setText("Not enough meal options available for the selected filter.");
			lunch.setText("");
			dinner.setText("");
		}
	}

	public void mealPlanScreen(Stage primaryStage) {

		DropShadow dropShadow = new DropShadow();
		dropShadow.setRadius(5);
		dropShadow.setOffsetX(3);
		dropShadow.setOffsetY(3);

		MealsInfo[] restaurants = new MealsInfo().get_restaurant_array();

		Text title = new Text("Meal Plan");
		title.setFont(Font.font("Arial", 25));
		title.setX(220);
		title.setY(30);
		title.setEffect(dropShadow);

		Label breakfast = createLabel("Breakfast:\n", 100);
		breakfast.setFont(Font.font("Arial", FontWeight.BOLD, 17));
		Label lunch = createLabel("Lunch:\n", 260);
		lunch.setFont(Font.font("Arial", FontWeight.BOLD, 17));
		Label dinner = createLabel("Dinner:\n", 420);
		dinner.setFont(Font.font("Arial", FontWeight.BOLD, 17));

		Button backButton = new Button("Back");
		backButton.setFont(Font.font("Arial", 14));
		backButton.setTranslateX(10);
		backButton.setTranslateY(10);
		backButton.setOnAction(e -> optionScreen(primaryStage));

		// Filter ComboBox
		ComboBox<String> filterOptions = new ComboBox<>();
		filterOptions.getItems().addAll("All", "Keto", "Vegan", "Paleo", "Low Carb",
				"Gluten Free");
		filterOptions.setValue("All");
		filterOptions.setTranslateX(480);
		filterOptions.setTranslateY(50);

		filterOptions.setOnAction(e -> {
			String filter = filterOptions.getValue();
			updateMealLabels(restaurants, filter, breakfast, lunch, dinner);
		});

		String initialFilter = filterOptions.getValue();
		updateMealLabels(restaurants, initialFilter, breakfast, lunch, dinner);

		Button newPlanButton = new Button("New Plan");
		newPlanButton.setFont(Font.font("Arial", 14));
		newPlanButton.setTranslateX(510);
		newPlanButton.setTranslateY(10);
		newPlanButton.setOnAction(e -> {
			String currentFilter = filterOptions.getValue();
			updateMealLabels(restaurants, currentFilter, breakfast, lunch, dinner);
		});
		Group root = new Group(title, breakfast, lunch, dinner, backButton,
				newPlanButton, filterOptions);

		Scene scene = new Scene(root, 675, 600, Color.MINTCREAM);
		primaryStage.setScene(scene);
		primaryStage.show();
	}


    //THIS IS THE ENTIRE CODE FOR THE NUTRITION TRACKING SCREEN

    private static int caloriesValue = 0;
	private static int totalFatValue = 0;
	private static int sodiumValue = 0;
	private static int carbohydratesValue = 0;
	private static int proteinValue = 0;
	private String caloriesUnit = " kcal";
	private String totalFatUnit = " g";
	private String sodiumUnit = " mg";
	private String carbohydratesUnit = " g";
	private String proteinUnit = " g";

	public void nutritionScreen(Stage primaryStage) {
		primaryStage.setTitle("Nutrition Tracking");

		DropShadow dropShadow = new DropShadow();
		dropShadow.setRadius(5);
		dropShadow.setOffsetX(3);
		dropShadow.setOffsetY(3);

		Text title = new Text("Nutrition Tracking");
		title.setFont(Font.font("Arial", 25));
		title.setX(120);
		title.setY(40);
		title.setEffect(dropShadow);

		Text caloriesLabel = new Text("Calories: " + caloriesValue);
		caloriesLabel.setFont(Font.font("Arial", 20));
		caloriesLabel.setX(65);
		caloriesLabel.setY(180);

		TextField caloriesInput = new TextField();
		caloriesInput.setPrefWidth(50);
		caloriesInput.setLayoutX(250);
		caloriesInput.setLayoutY(160);
		caloriesInput.setOnKeyPressed(e -> {
			if (e.getCode() == KeyCode.ENTER) {
				caloriesValue += Integer.parseInt(caloriesInput.getText().trim());
				caloriesLabel.setText("Calories: " + caloriesValue + caloriesUnit);
				caloriesInput.setVisible(false);
				caloriesLabel.setVisible(true);
			}
		});

		Text totalFatLabel = new Text("Total Fat: " + totalFatValue);
		totalFatLabel.setFont(Font.font("Arial", 20));
		totalFatLabel.setX(65);
		totalFatLabel.setY(265);

		TextField fatInput = new TextField();
		fatInput.setPrefWidth(50);
		fatInput.setLayoutX(250);
		fatInput.setLayoutY(245);
		fatInput.setOnKeyPressed(e -> {
			if (e.getCode() == KeyCode.ENTER) {
				totalFatValue += Integer.parseInt(fatInput.getText().trim());
				totalFatLabel.setText("Total Fat: " + totalFatValue + totalFatUnit);
				fatInput.setVisible(false);
				totalFatLabel.setVisible(true);
			}
		});

		Text sodiumLabel = new Text("Sodium: " + sodiumValue);
		sodiumLabel.setFont(Font.font("Arial", 20));
		sodiumLabel.setX(65);
		sodiumLabel.setY(345);

		TextField sodiumInput = new TextField();
		sodiumInput.setPrefWidth(50);
		sodiumInput.setLayoutX(250);
		sodiumInput.setLayoutY(325);
		sodiumInput.setOnKeyPressed(e -> {
			if (e.getCode() == KeyCode.ENTER) {
				sodiumValue += Integer.parseInt(fatInput.getText().trim());
				sodiumLabel.setText("Sodium: " + sodiumValue + sodiumUnit);
				sodiumInput.setVisible(false);
				sodiumLabel.setVisible(true);
			}
		});

		Text carbohydratesLabel = new Text("Carbohydrates: " + carbohydratesValue);
		carbohydratesLabel.setFont(Font.font("Arial", 20));
		carbohydratesLabel.setX(65);
		carbohydratesLabel.setY(420);

		TextField carbohydratesInput = new TextField();
		carbohydratesInput.setPrefWidth(50);
		carbohydratesInput.setLayoutX(250);
		carbohydratesInput.setLayoutY(400);
		carbohydratesInput.setOnKeyPressed(e -> {
			if (e.getCode() == KeyCode.ENTER) {
				carbohydratesValue += Integer.parseInt(carbohydratesInput.getText().trim());
				carbohydratesLabel.setText("Carbohydrates: " + carbohydratesValue + carbohydratesUnit);
				carbohydratesInput.setVisible(false);
				carbohydratesLabel.setVisible(true);
			}
		});

		Text proteinLabel = new Text("Protein: " + proteinValue);
		proteinLabel.setFont(Font.font("Arial", 20));
		proteinLabel.setX(65);
		proteinLabel.setY(500);

		TextField proteinInput = new TextField();
		proteinInput.setPrefWidth(50);
		proteinInput.setLayoutX(250);
		proteinInput.setLayoutY(480);
		proteinInput.setOnKeyPressed(e -> {
			if (e.getCode() == KeyCode.ENTER) {
				proteinValue += Integer.parseInt(proteinInput.getText().trim());
				proteinLabel.setText("Protein: " + proteinValue + proteinUnit);
				proteinInput.setVisible(false);
				proteinLabel.setVisible(true);
			}
		});

		Button changeButton = new Button("Add");
		changeButton.setLayoutX(160);
		changeButton.setLayoutY(80);
		changeButton.setOnAction(e -> {
			caloriesInput.setVisible(true);
			fatInput.setVisible(true);
			sodiumInput.setVisible(true);
			carbohydratesInput.setVisible(true);
			proteinInput.setVisible(true);
		});

		Button resetButton = new Button("Reset");
		resetButton.setLayoutX(155);
		resetButton.setLayoutY(570);
		resetButton.setOnAction(e -> {
			caloriesValue = 0;
			caloriesLabel.setText("Calories: " + caloriesValue + caloriesUnit);

			totalFatValue = 0;
			totalFatLabel.setText("Total Fat: " + totalFatValue + totalFatUnit);

			sodiumValue = 0;
			sodiumLabel.setText("Sodium: " + sodiumValue + sodiumUnit);

			carbohydratesValue = 0;
			carbohydratesLabel.setText("Carbohydrates: " + carbohydratesValue + carbohydratesUnit);

			proteinValue = 0;
			proteinLabel.setText("Protein: " + proteinValue + proteinUnit);

			caloriesInput.setVisible(false);
			fatInput.setVisible(false);
			sodiumInput.setVisible(false);
			carbohydratesInput.setVisible(false);
			proteinInput.setVisible(false);
		});

		caloriesInput.setVisible(false);
		fatInput.setVisible(false);
		sodiumInput.setVisible(false);
		carbohydratesInput.setVisible(false);
		proteinInput.setVisible(false);

		Button backButton = new Button("Back");
		backButton.setLayoutX(20);
		backButton.setLayoutY(20);
		backButton.setOnAction(e -> optionScreen(primaryStage));

		Group root = new Group(title, caloriesLabel, totalFatLabel, sodiumLabel,
				carbohydratesLabel, proteinLabel, backButton, caloriesInput, fatInput,
				sodiumInput, carbohydratesInput, proteinInput, changeButton, resetButton);

		caloriesLabel.setText("Calories: " + caloriesValue + caloriesUnit);
		totalFatLabel.setText("Total Fat: " + totalFatValue + totalFatUnit);
		sodiumLabel.setText("Sodium: " + sodiumValue + sodiumUnit);
		carbohydratesLabel.setText("Carbohydrates: " + carbohydratesValue + carbohydratesUnit);
		proteinLabel.setText("Protein: " + proteinValue + proteinUnit);

		Scene scene = new Scene(root, 375, 667, Color.WHITE);
		primaryStage.setScene(scene);
		primaryStage.show();
	}


